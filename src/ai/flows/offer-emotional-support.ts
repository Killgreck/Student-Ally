// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that offers emotional support to students.
 *
 * - offerEmotionalSupport - A function that handles the emotional support process.
 * - OfferEmotionalSupportInput - The input type for the offerEmotionalSupport function.
 * - OfferEmotionalSupportOutput - The return type for the offerEmotionalSupport function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const OfferEmotionalSupportInputSchema = z.object({
  studentId: z.string().describe('The ID of the student.'),
  message: z.string().describe('The message from the student.'),
});
export type OfferEmotionalSupportInput = z.infer<typeof OfferEmotionalSupportInputSchema>;

const OfferEmotionalSupportOutputSchema = z.object({
  response: z.string().describe('The AI response to the student message.'),
  stressLevel: z.number().describe('The student stress level (0-10).'),
  demotivationLevel: z.number().describe('The student demotivation level (0-10).'),
  anxietyLevel: z.number().describe('The student anxiety level (0-10).'),
});
export type OfferEmotionalSupportOutput = z.infer<typeof OfferEmotionalSupportOutputSchema>;

export async function offerEmotionalSupport(input: OfferEmotionalSupportInput): Promise<OfferEmotionalSupportOutput> {
  return offerEmotionalSupportFlow(input);
}

const prompt = ai.definePrompt({
  name: 'offerEmotionalSupportPrompt',
  input: {
    schema: z.object({
      studentId: z.string().describe('The ID of the student.'),
      message: z.string().describe('The message from the student.'),
    }),
  },
  output: {
    schema: z.object({
      response: z.string().describe('The AI response to the student message.'),
      stressLevel: z.number().describe('The student stress level (0-10).'),
      demotivationLevel: z.number().describe('The student demotivation level (0-10).'),
      anxietyLevel: z.number().describe('The student anxiety level (0-10).'),
    }),
  },
  prompt: `You are a supportive friend and counselor for university students. Your goal is to provide emotional support, 
  help them manage academic stress, and offer personalized advice. Maintain a friendly and empathetic tone.

  Analyze the student's message and infer their current stress, demotivation, and anxiety levels on a scale of 0-10.
  Provide a response that acknowledges their feelings, offers encouragement, and suggests practical steps they can take to address their challenges.
  Remember to maintain a conversational tone and avoid being overly formal or clinical.

  Student ID: {{{studentId}}}
  Message: {{{message}}}

  Response:`, 
});

const offerEmotionalSupportFlow = ai.defineFlow<
  typeof OfferEmotionalSupportInputSchema,
  typeof OfferEmotionalSupportOutputSchema
>({
  name: 'offerEmotionalSupportFlow',
  inputSchema: OfferEmotionalSupportInputSchema,
  outputSchema: OfferEmotionalSupportOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
